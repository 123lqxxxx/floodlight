/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.sdnplatform.sync.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class ClusterJoinResponseMessage implements org.apache.thrift.TBase<ClusterJoinResponseMessage, ClusterJoinResponseMessage._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClusterJoinResponseMessage");

  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newNodeId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeStore", org.apache.thrift.protocol.TType.LIST, (short)3);

  public AsyncMessageHeader header; // required
  public short newNodeId; // required
  public List<KeyedValues> nodeStore; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADER((short)1, "header"),
    NEW_NODE_ID((short)2, "newNodeId"),
    NODE_STORE((short)3, "nodeStore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADER
          return HEADER;
        case 2: // NEW_NODE_ID
          return NEW_NODE_ID;
        case 3: // NODE_STORE
          return NODE_STORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEWNODEID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AsyncMessageHeader.class)));
    tmpMap.put(_Fields.NEW_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("newNodeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NODE_STORE, new org.apache.thrift.meta_data.FieldMetaData("nodeStore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyedValues.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClusterJoinResponseMessage.class, metaDataMap);
  }

  public ClusterJoinResponseMessage() {
  }

  public ClusterJoinResponseMessage(
    AsyncMessageHeader header)
  {
    this();
    this.header = header;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClusterJoinResponseMessage(ClusterJoinResponseMessage other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetHeader()) {
      this.header = new AsyncMessageHeader(other.header);
    }
    this.newNodeId = other.newNodeId;
    if (other.isSetNodeStore()) {
      List<KeyedValues> __this__nodeStore = new ArrayList<KeyedValues>();
      for (KeyedValues other_element : other.nodeStore) {
        __this__nodeStore.add(new KeyedValues(other_element));
      }
      this.nodeStore = __this__nodeStore;
    }
  }

  public ClusterJoinResponseMessage deepCopy() {
    return new ClusterJoinResponseMessage(this);
  }

  @Override
  public void clear() {
    this.header = null;
    setNewNodeIdIsSet(false);
    this.newNodeId = 0;
    this.nodeStore = null;
  }

  public AsyncMessageHeader getHeader() {
    return this.header;
  }

  public ClusterJoinResponseMessage setHeader(AsyncMessageHeader header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public short getNewNodeId() {
    return this.newNodeId;
  }

  public ClusterJoinResponseMessage setNewNodeId(short newNodeId) {
    this.newNodeId = newNodeId;
    setNewNodeIdIsSet(true);
    return this;
  }

  public void unsetNewNodeId() {
    __isset_bit_vector.clear(__NEWNODEID_ISSET_ID);
  }

  /** Returns true if field newNodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNewNodeId() {
    return __isset_bit_vector.get(__NEWNODEID_ISSET_ID);
  }

  public void setNewNodeIdIsSet(boolean value) {
    __isset_bit_vector.set(__NEWNODEID_ISSET_ID, value);
  }

  public int getNodeStoreSize() {
    return (this.nodeStore == null) ? 0 : this.nodeStore.size();
  }

  public java.util.Iterator<KeyedValues> getNodeStoreIterator() {
    return (this.nodeStore == null) ? null : this.nodeStore.iterator();
  }

  public void addToNodeStore(KeyedValues elem) {
    if (this.nodeStore == null) {
      this.nodeStore = new ArrayList<KeyedValues>();
    }
    this.nodeStore.add(elem);
  }

  public List<KeyedValues> getNodeStore() {
    return this.nodeStore;
  }

  public ClusterJoinResponseMessage setNodeStore(List<KeyedValues> nodeStore) {
    this.nodeStore = nodeStore;
    return this;
  }

  public void unsetNodeStore() {
    this.nodeStore = null;
  }

  /** Returns true if field nodeStore is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeStore() {
    return this.nodeStore != null;
  }

  public void setNodeStoreIsSet(boolean value) {
    if (!value) {
      this.nodeStore = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((AsyncMessageHeader)value);
      }
      break;

    case NEW_NODE_ID:
      if (value == null) {
        unsetNewNodeId();
      } else {
        setNewNodeId((Short)value);
      }
      break;

    case NODE_STORE:
      if (value == null) {
        unsetNodeStore();
      } else {
        setNodeStore((List<KeyedValues>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADER:
      return getHeader();

    case NEW_NODE_ID:
      return Short.valueOf(getNewNodeId());

    case NODE_STORE:
      return getNodeStore();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADER:
      return isSetHeader();
    case NEW_NODE_ID:
      return isSetNewNodeId();
    case NODE_STORE:
      return isSetNodeStore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClusterJoinResponseMessage)
      return this.equals((ClusterJoinResponseMessage)that);
    return false;
  }

  public boolean equals(ClusterJoinResponseMessage that) {
    if (that == null)
      return false;

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_newNodeId = true && this.isSetNewNodeId();
    boolean that_present_newNodeId = true && that.isSetNewNodeId();
    if (this_present_newNodeId || that_present_newNodeId) {
      if (!(this_present_newNodeId && that_present_newNodeId))
        return false;
      if (this.newNodeId != that.newNodeId)
        return false;
    }

    boolean this_present_nodeStore = true && this.isSetNodeStore();
    boolean that_present_nodeStore = true && that.isSetNodeStore();
    if (this_present_nodeStore || that_present_nodeStore) {
      if (!(this_present_nodeStore && that_present_nodeStore))
        return false;
      if (!this.nodeStore.equals(that.nodeStore))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ClusterJoinResponseMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ClusterJoinResponseMessage typedOther = (ClusterJoinResponseMessage)other;

    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(typedOther.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, typedOther.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewNodeId()).compareTo(typedOther.isSetNewNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newNodeId, typedOther.newNodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeStore()).compareTo(typedOther.isSetNodeStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeStore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeStore, typedOther.nodeStore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HEADER
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.header = new AsyncMessageHeader();
            this.header.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NEW_NODE_ID
          if (field.type == org.apache.thrift.protocol.TType.I16) {
            this.newNodeId = iprot.readI16();
            setNewNodeIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NODE_STORE
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
              this.nodeStore = new ArrayList<KeyedValues>(_list32.size);
              for (int _i33 = 0; _i33 < _list32.size; ++_i33)
              {
                KeyedValues _elem34; // required
                _elem34 = new KeyedValues();
                _elem34.read(iprot);
                this.nodeStore.add(_elem34);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.header != null) {
      oprot.writeFieldBegin(HEADER_FIELD_DESC);
      this.header.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetNewNodeId()) {
      oprot.writeFieldBegin(NEW_NODE_ID_FIELD_DESC);
      oprot.writeI16(this.newNodeId);
      oprot.writeFieldEnd();
    }
    if (this.nodeStore != null) {
      if (isSetNodeStore()) {
        oprot.writeFieldBegin(NODE_STORE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.nodeStore.size()));
          for (KeyedValues _iter35 : this.nodeStore)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClusterJoinResponseMessage(");
    boolean first = true;

    sb.append("header:");
    if (this.header == null) {
      sb.append("null");
    } else {
      sb.append(this.header);
    }
    first = false;
    if (isSetNewNodeId()) {
      if (!first) sb.append(", ");
      sb.append("newNodeId:");
      sb.append(this.newNodeId);
      first = false;
    }
    if (isSetNodeStore()) {
      if (!first) sb.append(", ");
      sb.append("nodeStore:");
      if (this.nodeStore == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeStore);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (header == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

